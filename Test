/*
 * ESP8266 Human-Machine Interaction with Sensor-to-Cloud Logging
 *
 * Scenario:
 *   After long periods of focused work, the system monitors a physiological parameter
 *   (simulated via an analog sensor) and determines whether to activate:
 *     - "Deep Focus Recovery Mode" (if sensor value > 70) or
 *     - "Quick Relaxation Mode" (if sensor value > 90),
 *   or remain in an idle state.
 *
 *   The system:
 *     - Sends a command (via Serial) for external systems (e.g., TouchDesigner) to update visuals/audio.
 *     - Uses the built-in LED to indicate the current mode:
 *         * Deep Focus Recovery: LED steadily ON
 *         * Quick Relaxation: LED blinks rapidly
 *         * Idle: LED OFF
 *     - Logs the sensor value and current mode to Google Sheets via an HTTPS POST request
 *       (using Google App Script and the HTTPSRedirect library).
 *
 * Dependencies:
 *   - ESP8266WiFi: for WiFi connectivity
 *   - HTTPSRedirect: https://github.com/electronicsguy/HTTPSRedirect
 *
 * Note:
 *   Replace the WiFi credentials and Google Script Deployment ID with your own.
 */

#include <Arduino.h>
#include <ESP8266WiFi.h>
#include "HTTPSRedirect.h"

// WiFi credentials
const char* ssid     = "CHANGEME-SSID";
const char* password = "CHANGEME-PASSWORD";

// Google Script Deployment ID
const char* GScriptId = "CHANGEME-GSCRIPTID";

// Base JSON payload for Google Sheets upload (using the append_row command)
String payload_base = "{\"command\": \"append_row\", \"sheet_name\": \"SensorData\", \"values\": ";

// Google Sheets HTTPS setup
const char* host = "script.google.com";
const int httpsPort = 443;
String url = String("/macros/s/") + GScriptId + "/exec";
HTTPSRedirect* client = nullptr;

// Built-in LED pin (for mode indication)
const int statusLEDPin = LED_BUILTIN;

// Mode thresholds (assumed to be derived from the analog sensor reading)
const int heartRateThreshold = 70;         // Threshold for Deep Focus Recovery Mode
const int highHeartRateThreshold = 90;       // Threshold for Quick Relaxation Mode

// Define recovery modes
enum RecoveryMode { IDLE, DEEP_FOCUS_RECOVERY, QUICK_RELAXATION };
RecoveryMode currentMode = IDLE;

// Variables for LED blinking control (used in Quick Relaxation Mode)
unsigned long previousMillis = 0;
const unsigned long blinkInterval = 200;  // LED blink interval in milliseconds

//------------------------------------------------------------------------------
// Function: updateLED()
//   Updates the built-in LED based on the current mode.
//------------------------------------------------------------------------------
void updateLED() {
  unsigned long currentMillis = millis();
  switch (currentMode) {
    case DEEP_FOCUS_RECOVERY:
      // LED stays ON continuously in Deep Focus Recovery Mode
      digitalWrite(statusLEDPin, HIGH);
      break;
    case QUICK_RELAXATION:
      // LED blinks rapidly in Quick Relaxation Mode
      if (currentMillis - previousMillis >= blinkInterval) {
        previousMillis = currentMillis;
        digitalWrite(statusLEDPin, !digitalRead(statusLEDPin));
      }
      break;
    case IDLE:
      // LED is OFF in Idle state
      digitalWrite(statusLEDPin, LOW);
      break;
  }
}

//------------------------------------------------------------------------------
// Function: sendCommand()
//   Sends a command via Serial to notify external systems (e.g., TouchDesigner).
//------------------------------------------------------------------------------
void sendCommand(const char* cmd) {
  Serial.print("Sending command: ");
  Serial.println(cmd);
  // In practice, you may forward this command using other communication channels.
}

//------------------------------------------------------------------------------
// Function: updateMode()
//   Determines the mode based on the sensor value and sends appropriate commands.
//------------------------------------------------------------------------------
void updateMode(int sensorValue) {
  RecoveryMode newMode = IDLE;
  
  if (sensorValue > highHeartRateThreshold) {
    newMode = QUICK_RELAXATION;
  } else if (sensorValue > heartRateThreshold) {
    newMode = DEEP_FOCUS_RECOVERY;
  } else {
    newMode = IDLE;
  }
  
  if (newMode != currentMode) {
    currentMode = newMode;
    switch (currentMode) {
      case DEEP_FOCUS_RECOVERY:
        sendCommand("CMD:DEEP_FOCUS_RECOVERY");
        Serial.println("Activated Deep Focus Recovery Mode");
        break;
      case QUICK_RELAXATION:
        sendCommand("CMD:QUICK_RELAXATION");
        Serial.println("Activated Quick Relaxation Mode");
        break;
      case IDLE:
        sendCommand("CMD:EXIT_MODE");
        Serial.println("No active mode, system is idle");
        break;
    }
  }
}

//------------------------------------------------------------------------------
// setup()
//   Initialize Serial, connect to WiFi, test HTTPS connection, and set up LED.
//------------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  pinMode(statusLEDPin, OUTPUT);
  digitalWrite(statusLEDPin, LOW);
  
  Serial.println();
  Serial.println("Initializing system...");
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to ");
  Serial.print(ssid);
  Serial.println(" ...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
  // Test HTTPS connection using HTTPSRedirect
  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();  // Skip certificate validation (not recommended for production)
  client->setPrintResponseBody(true);
  client->setContentTypeHeader("application/json");
  
  Serial.print("Connecting to ");
  Serial.println(host);
  
  bool flag = false;
  for (int i = 0; i < 5; i++) {
    int retval = client->connect(host, httpsPort);
    if (retval == 1) {
      flag = true;
      Serial.println("Connected to server.");
      break;
    } else {
      Serial.println("Connection failed. Retrying...");
    }
  }
  if (!flag) {
    Serial.print("Could not connect to server: ");
    Serial.println(host);
    return;
  }
  delete client;
  client = nullptr;
}

//------------------------------------------------------------------------------
// loop()
//   Reads sensor data, updates mode and LED, and sends data to Google Sheets.
//------------------------------------------------------------------------------
void loop() {
  // Read the analog sensor value from A0 (simulate physiological measurement)
  int sensorValue = analogRead(A0);
  Serial.print("Sensor Value: ");
  Serial.println(sensorValue);
  
  // Update the current mode based on the sensor reading
  updateMode(sensorValue);
  
  // Update the LED indication based on the current mode
  updateLED();
  
  // Determine mode string for logging ("IDLE", "DFR" for Deep Focus Recovery, "QR" for Quick Relaxation)
  String modeStr;
  switch (currentMode) {
    case IDLE: modeStr = "IDLE"; break;
    case DEEP_FOCUS_RECOVERY: modeStr = "DFR"; break;
    case QUICK_RELAXATION: modeStr = "QR"; break;
  }
  
  // Create a JSON payload including both the sensor value and current mode
  // Example payload: {"command": "append_row", "sheet_name": "SensorData", "values": ["512","DFR"]}
  String payload = payload_base + "[\"" + String(sensorValue) + "\",\"" + modeStr + "\"]}";
  
  // Create HTTPSRedirect client if it doesn't exist yet
  static bool clientCreated = false;
  if (!clientCreated) {
    client = new HTTPSRedirect(httpsPort);
    client->setInsecure();
    client->setPrintResponseBody(true);
    client->setContentTypeHeader("application/json");
    clientCreated = true;
  }
  
  // Ensure the client is connected
  if (client != nullptr) {
    if (!client->connected()) {
      client->connect(host, httpsPort);
    }
  } else {
    Serial.println("Error: HTTPS client object is null!");
  }
  
  // Publish the data to Google Sheets
  Serial.println("Publishing data to Google Sheets...");
  Serial.println(payload);
  if (client->POST(url, host, payload)) {
    Serial.println("Data published successfully.");
  } else {
    Serial.println("Error publishing data.");
  }
  
  // Wait for 10 seconds before repeating the loop
  delay(10000);
}
